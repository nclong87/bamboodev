<?phpclass Paypal {	public static function getToken() {		$time = time();		if(isset($_SESSION['paypal_token'])) {			if($_SESSION['paypal_token']['expired_time'] >= $time) {				return $_SESSION['paypal_token']['token'];			}		}		$ch = curl_init();		curl_setopt($ch, CURLOPT_URL, PAYPAL_URL."oauth2/token");		curl_setopt($ch, CURLOPT_HEADER, false);		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);		curl_setopt($ch, CURLOPT_POST, true);		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 		curl_setopt($ch, CURLOPT_USERPWD, PAYPAL_CLIENTID.":".PAYPAL_SECRET);		curl_setopt($ch, CURLOPT_POSTFIELDS, "grant_type=client_credentials");				$result = curl_exec($ch);		curl_close($ch);		if(empty($result)) throw new Exception('payment::createPayment', ERR_PAYMENT_PAYPAL_TOKEN);		else {			$token = json_decode($result,true);			$_SESSION['paypal_token']['token'] = $token;			$_SESSION['paypal_token']['expired_time'] = $time + $token['expires_in'];		    return $token;		}		exit;	}	public static function createPayment($token,$cart,$orderId) {		$detail = '';		$item_list = array();		$total = 0;		foreach ($cart as $product_id => $item) {			$total+= $item['total'];			$item_list[] = array(				'quantity' => $item['quantity'],				'name' => $item['post_title'],				'price' => $item['price'],				'sku' => $product_id,				'currency' => 'USD'			);		}		if($total <= 0) exit;		$detail = array('subtotal' => format_number($total),'shipping' => format_number(PAYMENT_SHIPPING_FEE));		$total += PAYMENT_SHIPPING_FEE;		$data = '{		  "intent":"sale",		  "redirect_urls":{		    "return_url":"'.DOMAIN.'/process?action=paypal_approve&order_id='.$orderId.'",		    "cancel_url":"'.DOMAIN.'/process?action=paypal_cancel&order_id='.$orderId.'"		  },		  "payer":{		    "payment_method":"paypal"		  },		  "transactions":[		    {		      "amount":{		        "total":"'.format_number($total).'",		        "currency":"USD",		        "details" : '.json_encode($detail).'		      },		      "description":"Pay for order on ludevine.com",		      "item_list": {		      	"items" : '.json_encode($item_list).'		      }		    }		  ]		}';		$ch = curl_init();		curl_setopt($ch, CURLOPT_URL, PAYPAL_URL."payments/payment");		$header = array(			'Content-Type:application/json',			"Authorization:{$token['token_type']} {$token['access_token']}"		);		curl_setopt($ch, CURLOPT_HEADER, false);		curl_setopt ( $ch , CURLOPT_HTTPHEADER, $header );		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);		curl_setopt($ch, CURLOPT_POST, true);		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 		curl_setopt($ch, CURLOPT_POSTFIELDS, $data);		Utils::log('payment::createPayment_CALLAPI',$data);		$result = curl_exec($ch);		curl_close($ch);		if(empty($result)) throw new Exception('payment::createPayment', ERR_PAYMENT_PAYPAL_CREATE_ORDER);		else {		    return json_decode($result,true);		}		exit;	}	public static function queryPayment($token,$paypalOrderId) {		$header = array(			'Content-Type:application/json',			"Authorization:{$token['token_type']} {$token['access_token']}"		);		$ch = curl_init();		curl_setopt($ch, CURLOPT_URL, PAYPAL_URL."payments/payment/".$paypalOrderId);		curl_setopt($ch, CURLOPT_HEADER, false);		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);		curl_setopt ( $ch , CURLOPT_HTTPHEADER, $header );		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 		$result = curl_exec($ch);		curl_close($ch);		if(empty($result))die("Error: No response.");		else {		    return json_decode($result,true);		}		exit;	}	public static function approvePayment($token,$payId,$payerId) {		$data = '{ "payer_id" : "'.$payerId.'" }';		$header = array(			'Content-Type:application/json',			"Authorization:{$token['token_type']} {$token['access_token']}"		);		$ch = curl_init();		curl_setopt($ch, CURLOPT_URL, PAYPAL_URL."payments/payment/{$payId}/execute");		curl_setopt($ch, CURLOPT_HEADER, false);		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);		curl_setopt ( $ch , CURLOPT_HTTPHEADER, $header );		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 		curl_setopt($ch, CURLOPT_POST, true);		curl_setopt($ch, CURLOPT_POSTFIELDS, $data);		$result = curl_exec($ch);		curl_close($ch);		if(empty($result))throw new Exception('payment::createPayment', ERR_PAYMENT_PAYPAL_CREATE_ORDER);		else {		    return json_decode($result,true);		}		exit;	}	public static function refundSale($token,$sale,$amount) {		if($sale['state'] != 'completed') throw new Exception('error::refundSale1', ERR_PAYMENT_REFUND);		$header = array(			'Content-Type:application/json',			"Authorization:{$token['token_type']} {$token['access_token']}"		);		$ch = curl_init();		curl_setopt($ch, CURLOPT_URL, $sale['refund_link']);		curl_setopt($ch, CURLOPT_HEADER, false);		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);		curl_setopt ( $ch , CURLOPT_HTTPHEADER, $header );		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); 		if(!empty($amount)) { //refund partial			$data = '{"amount":{"total":"'.format_number($amount).'","currency":"USD"}}';			curl_setopt($ch, CURLOPT_POST, true);			curl_setopt($ch, CURLOPT_POSTFIELDS, $data);		} else {					}		$result = curl_exec($ch);		curl_close($ch);		if(empty($result))throw new Exception('error::refundSale2', ERR_PAYMENT_REFUND);		else {		    return json_decode($result,true);		}		exit;	}}