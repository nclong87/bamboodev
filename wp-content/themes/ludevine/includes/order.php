<?phpclass Order {	public static function findSaleById($saleId) {		global $wpdb;		$query = $wpdb->prepare('SELECT * FROM `sales` WHERE `id` = %s',$saleId);		return $wpdb->get_row($query,ARRAY_A);	}	public static function findAddressById($id) {		global $wpdb;		$query = $wpdb->prepare('SELECT * FROM `address` WHERE `status` = 1 AND `id` = %d',$id);		return $wpdb->get_row($query,ARRAY_A);	}	public static function addAddress($data,$return = false) {		global $wpdb;		$time = Utils::getCurrentDateSQL();		$addressData = array(			'firstname' => $data['firstname'],			'lastname' => $data['lastname'],			'address' => $data['address'],			'city' => $data['city'],			'state' => $data['state'],			'country' => $data['country'],			'zipcode' => $data['zipcode'],			'phone' => $data['phone'],			'email' => $data['email'],			'customer_id' => getValue($data, 'customer_id'),			'create_time' => $time,			'update_time' => $time		);		$wpdb->insert('address', $addressData);		if($return) {			return $wpdb->insert_id;		}	}	public static function addCustomer($data,$return = false) {		global $wpdb;		$time = Utils::getCurrentDateSQL();		$customerData = array(			'email' => $data['email'],			'password' => $data['password'],			'address_id' => $data['address_id'],			'create_time' => $time,			'update_time' => $time		);		$wpdb->insert('customers', $customerData);		if($return) {			return $wpdb->insert_id;		}	}		public static function updateAddress($data,$id) {		global $wpdb;		$time = Utils::getCurrentDateSQL();		$addressData = array(			'firstname' => $data['firstname'],			'lastname' => $data['lastname'],			'address' => $data['address'],			'city' => $data['city'],			'state' => $data['state'],			'country' => $data['country'],			'zipcode' => $data['zipcode'],			'phone' => $data['phone'],			'email' => $data['email'],			'update_time' => $time		);		$wpdb->update('address', $addressData, array('id' => $id));	}		public static function findById($id) {		global $wpdb;		$query = $wpdb->prepare('SELECT t0.*,t1.`address`,t1.`city`,t1.`state`,t1.`country`,t1.`email`,t1.`firstname`,t1.`lastname`,t1.`phone`,t1.`zipcode` FROM `orders` t0 LEFT JOIN `address` t1 ON t0.`address_id` = t1.id WHERE t0.id = %d',$id);		return $wpdb->get_row($query,ARRAY_A);	}	public static function findProductsByOrder($order_id) {		global $wpdb;		$query = $wpdb->prepare('SELECT * FROM `order_products` WHERE `order_id` = %d',$order_id);		return $wpdb->get_results($query,ARRAY_A);	}		public static function sendMail($order_id) {		try {			$order = Order::findById($order_id);			if($order == null) throw new Exception('Order id '.$order_id.' not found', ERR_ORDER_NOT_FOUND);			$bAddr = Order::findAddressById($order['billaddr_id']);			if($bAddr == null) throw new Exception('Address id '.$order['billaddr_id'].' not found', ERR_DB_NOTFOUND);			$list = Order::findProductsByOrder($order_id);			$data = array(				'order_id' => $order['id'],				'time_create' => $order['time_create'],				'bAddress' => array(					'fullname' => $bAddr['firstname'].' '.$bAddr['lastname'],					'email' => $bAddr['email'],					'phone' => $bAddr['phone'],					'full_address' => "{$bAddr['address']}, {$bAddr['state']} {$bAddr['zipcode']} {$bAddr['country']}"				),				'sAddress' => array(					'fullname' => $order['firstname'].' '.$order['lastname'],					'email' => $order['email'],					'phone' => $order['phone'],					'full_address' => "{$order['address']}, {$order['state']} {$order['zipcode']} {$order['country']}"				),				'list' => $list,				'shipping_fee' => $order['shipping_fee'],				'sub_total' => $order['total'] + $order['shipping_fee']			);			$html = get_include_contents(ROOT.'/templates/order.html', $data);			wp_mail($order['email'], '[Ludevine] Order receipt #'.$order_id, $html);			wp_mail(get_option('admin_email'), '[Ludevine] Order receipt #'.$order_id, $html);			return true;		} catch (Exception $e) {			if(WP_DEBUG) {				echo '<pre>';				echo $e->getMessage().' at line '.$e->getLine().'<br>';				echo $e->getTraceAsString();			}			Utils::logException($e);		}		return false;	}	}